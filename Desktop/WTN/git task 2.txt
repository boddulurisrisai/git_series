Task 2: 
a. How git workflow works?
   Git workflow consists of four fundamentals,they are workspace(working directory),index(staging area),local repository,remote repository
    1.The files in the workspace are commited to local repository using commit command (git commit -a)
    2.If the files are modified,then the files from workspace are added to staging area using add command (git add .)
    3.the files in the staging area are commited to local repository using commit command (git commit)
    4.Now from local repository we must store in the remote repository using push command (git push -u nickname master)
    5.we can retrieve files from remote repository to local rpository using fetch command and from local to workspace using merge command.
    6.we can retrieve files directly from remote repository to workspace using pull command.


 b. What're the different stages of a git project as commit, add?
    Files in a repository go through three stages:
     1.Untracked: the file exists in workspace, but is not part of local repository.
     2.Staged: the file has been added to local repository but changes have not been committed
     3.Committed: the change has been committed and added to local repository.

    
 c. Is it possible to do a git commit before git add . if you have made any changes? Explain why?
    No it is not possible beacuse the updated file must be added to staging area.
    The git add command adds a change in the working directory to the staging area.
    It tells Git that you want to include updates to a particular file in the next commit. 
    
   
 d. Why is git diff used?
   Diff command is used in git to track the difference between the changes made on a file.
   Since Git is a version control system, tracking changes are something very vital to it.
   Using the gid diff command we can know whether the file is updated or not to add and commit the file to local repository.

    
 e. Can we leave the commit message as blank?
    No, we cannot leave the commit message as empty because giving the message helps in identifying different versions of the file.
    Using the commit message we know which is the updated version and which is the prevoius version to remove or update or make branches to the versions.
    Providing a meaningful commit message is part of good development practice and good repository step. 
    

